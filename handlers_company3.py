import asyncio
import toml
from dotenv import load_dotenv
import os
import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import  F, Router, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram import F
from datetime import datetime
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
load_dotenv() # –ó–∞–≥—Ä—É–∑–∫–∞ .env


TOKEN = os.getenv("TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
TOML_FILE_OTHER = os.getenv("TOML_FILE_OTHER")
ADMIN_ID = os.getenv("ADMIN_ID")

route3 = Router()




@route3.message(F.text.lower() == "company3")
async def cmd_sub_company_1(message: types.Message):
    kb = [
        [
            types.KeyboardButton(text="SSL_M"),
            types.KeyboardButton(text="Domain_M")
        ],
        [
            types.KeyboardButton(text="–î—Ä—É–≥–æ–µ_M")
        ],
        [
            types.KeyboardButton(text="–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏_M")
        ],
        [
            types.KeyboardButton(text="–ù–∞–∑–∞–¥")
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –ø–æ–¥–ø–∏—Å–æ–∫"
    )
    if str(message.from_user.id) in ADMIN_ID:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –ø–æ–¥–ø–∏—Å–æ–∫", reply_markup=keyboard)
    else:
        await message.answer("–í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ–ª–µ keyboard

# –í subscriptions_info –ø–µ—Ä–µ–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ check_subscriptions()
# –ù—É –∏ –≤—ã–≤–æ–¥–º–∏ subscriptions_info
# Other
@route3.message(F.text.lower() == "–Ω–∞–∑–∞–¥")
async def send_subscriptions(message: Message):
    if str(message.from_user.id) in ADMIN_ID:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –ø–æ–¥–ø–∏—Å–æ–∫",cmd_sub_company_1)



@route3.message(F.text.lower() == "–¥—Ä—É–≥–æ–µ_m")
async def send_subscriptions(message: Message):
    subscriptions_info = check_subscriptions_other()
    if str(message.from_user.id) in ADMIN_ID:
        await message.answer(subscriptions_info)


# –î–æ–±–∞–≤–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é 
# SSL
@route3.message(F.text.lower() == "ssl_m")
async def send_subscriptions_ssl(message: Message):
    subscriptions_info = check_subscriptions_ssl()
    if str(message.from_user.id) in ADMIN_ID:
        await message.answer(subscriptions_info)

# DOMAIN
@route3.message(F.text.lower() == "domain_m")
async def send_subscriptions_domain(message: Message):
    subscriptions_info = check_subscriptions_domain()
    if str(message.from_user.id) in ADMIN_ID:
        await message.answer(subscriptions_info)

# ALL

@route3.message(F.text.lower() == "–≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏_m")
async def send_all_subscriptions(message: Message):
    message_user_id = message.from_user.id
    if str(message_user_id) in ADMIN_ID:
        # –ü–æ–ª—É—á–∞—é –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
        subscriptions_info_other = check_subscriptions_other()
        subscriptions_info_ssl = check_subscriptions_ssl()
        subscriptions_info_domain = check_subscriptions_domain()
        # –í –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        all_subscriptions_info = (
            f"\n{subscriptions_info_other}\n\n"
            f"\n{subscriptions_info_ssl}\n\n"
            f"\n{subscriptions_info_domain}\n\n"
        )
        
        await message.answer(all_subscriptions_info)

# End –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ -----------------------------------------------------


#Other------------------------------------------------------------------

def load_subscriptions():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ TOML-—Ñ–∞–π–ª–∞."""
    try:
        data = toml.load(TOML_FILE_OTHER)
        return data.get("other_m", {})
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ TOML: {e}")
        return {}




def check_subscriptions_other():
    today = datetime.today().date()      # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
    subscriptions = load_subscriptions() # –ó–∞–≥—Ä—É–∑–∫–∞ TOML

    if not subscriptions:                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫
        return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫."

    all_subs = []       # –°–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ —Å –¥–∞—Ç–∞–º –∫–æ–Ω—Ü–∞
    expiring_soon = []  # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 30 –¥–Ω–µ–π –ø–∏—à–µ–º —Å—é–¥–∞

    # expires - –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    # today   - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞



    for sub in subscriptions.values():

        name = sub["name"]
        expires = datetime.strptime(sub["expires"], "%Y-%m-%d").date()
        days_left = (expires - today).days                                 # expires - today ‚Äî —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏ –∏ .days –ø–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –∏–∑ timedelta

        all_subs.append(f"{name}: –∏—Å—Ç–µ–∫–∞–µ—Ç {expires} ({days_left} –¥–Ω–µ–π)")  # .append() = –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞

        if days_left <= 30: # –ï—Å–ª–∏ <= 30 —Ç–æ —Å–æ—Ö—Ä–æ–Ω—è–µ–º –≤ expiring_soon
            expiring_soon.append(f"‚ö† {name}: {days_left} –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è!")


    message_parts = ["üìã –í—Å–µ –¥—Ä—É–≥–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:"] + all_subs

    if expiring_soon:
        message_parts.append("\n‚è≥ –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—Ç:")
        message_parts.extend(expiring_soon)

    return "\n".join(message_parts)

#Ens Other-------------------------------------------------------------------------------

# SSL ---------------------------------------------------------------------------------

def load_subscriptions_ssl():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ TOML-—Ñ–∞–π–ª–∞."""
    try:
        data = toml.load(TOML_FILE_OTHER)
        return data.get("ssl_m", {})
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ TOML: {e}")
        return {}




def check_subscriptions_ssl():
    today = datetime.today().date()      # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
    subscriptions = load_subscriptions_ssl() # –ó–∞–≥—Ä—É–∑–∫–∞ TOML

    if not subscriptions:                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫
        return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫."

    all_subs = []       # –°–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ —Å –¥–∞—Ç–∞–º –∫–æ–Ω—Ü–∞
    expiring_soon = []  # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 30 –¥–Ω–µ–π –ø–∏—à–µ–º —Å—é–¥–∞

    # expires - –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    # today   - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞



    for sub in subscriptions.values():

        name = sub["name"]
        expires = datetime.strptime(sub["expires"], "%Y-%m-%d").date()
        days_left = (expires - today).days                                 # expires - today ‚Äî —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏ –∏ .days –ø–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –∏–∑ timedelta

        all_subs.append(f"{name}: –∏—Å—Ç–µ–∫–∞–µ—Ç {expires} ({days_left} –¥–Ω–µ–π)")  # .append() = –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞

        if days_left <= 30: # –ï—Å–ª–∏ <= 30 —Ç–æ —Å–æ—Ö—Ä–æ–Ω—è–µ–º –≤ expiring_soon
            expiring_soon.append(f"‚ö† {name}: {days_left} –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è!")


    message_parts = ["üìã –í—Å–µ SSL:"] + all_subs

    if expiring_soon:
        message_parts.append("\n‚è≥ –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—Ç:")
        message_parts.extend(expiring_soon)

    return "\n".join(message_parts)



# END SSL -----------------------------------------------------------------------------


# Domain ------------------------------------------------------------------------------

def load_subscriptions_domain():
    try:
        data = toml.load(TOML_FILE_OTHER)
        return data.get("domain_m", {})
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ TOML: {e}")
        return {}




def check_subscriptions_domain():
    today = datetime.today().date()      # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
    subscriptions = load_subscriptions_domain() # –ó–∞–≥—Ä—É–∑–∫–∞ TOML

    if not subscriptions:                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫
        return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫."

    all_subs = []       # –°–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ —Å –¥–∞—Ç–∞–º –∫–æ–Ω—Ü–∞
    expiring_soon = []  # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 30 –¥–Ω–µ–π –ø–∏—à–µ–º —Å—é–¥–∞

    # expires - –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    # today   - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞



    for sub in subscriptions.values():

        name = sub["name"]
        expires = datetime.strptime(sub["expires"], "%Y-%m-%d").date()
        days_left = (expires - today).days                                 # expires - today ‚Äî —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏ –∏ .days –ø–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –∏–∑ timedelta

        all_subs.append(f"{name}: –∏—Å—Ç–µ–∫–∞–µ—Ç {expires} ({days_left} –¥–Ω–µ–π)")  # .append() = –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞

        if days_left <= 30: # –ï—Å–ª–∏ <= 30 —Ç–æ —Å–æ—Ö—Ä–æ–Ω—è–µ–º –≤ expiring_soon
            expiring_soon.append(f"‚ö† {name}: {days_left} –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è!")


    message_parts = ["üìã –í—Å–µ Domain:"] + all_subs

    if expiring_soon:
        message_parts.append("\n‚è≥ –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—Ç:")
        message_parts.extend(expiring_soon)

    return "\n".join(message_parts)

# END Domain---------------------------------------------------------------------------


# END FIREWALL -----------------------------------------------------------------