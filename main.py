import toml
import os
import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F



from dotenv import load_dotenv
import os

load_dotenv() # –ó–∞–≥—Ä—É–∑–∫–∞ .env


TOKEN = os.getenv("TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
TOML_FILE_OTHER = os.getenv("TOML_FILE_OTHER")
ADMIN_ID = os.getenv("ADMIN_ID")

print(ADMIN_ID)
print(os.path.abspath(TOML_FILE_OTHER))


bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# Keyboard -------------------------------------------------------
# https://mastergroosha.github.io/aiogram-3-guide/buttons/

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = [
        [
            types.KeyboardButton(text="SSL"),
            types.KeyboardButton(text="Domain"),
            types.KeyboardButton(text="–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—â–∏—Ç—ã"),
            types.KeyboardButton(text="–î—Ä—É–≥–æ–µ")
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –ø–æ–¥–ø–∏—Å–æ–∫"
    )
    if ADMIN_ID == str(message.from_user.id):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –ø–æ–¥–ø–∏—Å–æ–∫?", reply_markup=keyboard)
    else:
        await message.answer("–í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")




# –í subscriptions_info –ø–µ—Ä–µ–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ check_subscriptions()
# –ù—É –∏ –≤—ã–≤–æ–¥–º–∏ subscriptions_info
@dp.message(F.text.lower() == "–¥—Ä—É–≥–æ–µ")
async def send_subscriptions(message: Message):
    subscriptions_info = await check_subscriptions()
    await message.answer(subscriptions_info)



@dp.message(F.text.lower() == "ssl")
async def send_subscriptions_ssl(message: Message):
    subscriptions_info = await check_subscriptions_ssl()
    await message.answer(subscriptions_info)
# End keyboard ---------------------------------------------------

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ–ª–µ keyboard

@dp.message(Command("id"))
async def id_user(message: Message):
    message_user_id = message.from_user.id
    await message.answer(str(message_user_id))

#Other------------------------------------------------------------------

def load_subscriptions():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ TOML-—Ñ–∞–π–ª–∞."""
    try:
        data = toml.load(TOML_FILE_OTHER)
        return data.get("other", {})
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ TOML: {e}")
        return {}




async def check_subscriptions():
    today = datetime.today().date()      # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
    subscriptions = load_subscriptions() # –ó–∞–≥—Ä—É–∑–∫–∞ TOML

    if not subscriptions:                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫
        return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫."

    all_subs = []       # –°–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ —Å –¥–∞—Ç–∞–º –∫–æ–Ω—Ü–∞
    expiring_soon = []  # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 30 –¥–Ω–µ–π –ø–∏—à–µ–º —Å—é–¥–∞

    # expires - –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    # today   - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞



    for sub in subscriptions.values():

        name = sub["name"]
        expires = datetime.strptime(sub["expires"], "%Y-%m-%d").date()
        days_left = (expires - today).days                                 # expires - today ‚Äî —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏ –∏ .days –ø–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –∏–∑ timedelta

        all_subs.append(f"{name}: –∏—Å—Ç–µ–∫–∞–µ—Ç {expires} ({days_left} –¥–Ω–µ–π)")  # .append() = –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞

        if days_left <= 30: # –ï—Å–ª–∏ <= 30 —Ç–æ —Å–æ—Ö—Ä–æ–Ω—è–µ–º –≤ expiring_soon
            expiring_soon.append(f"‚ö† {name}: {days_left} –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è!")


    message_parts = ["üìã –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏:"] + all_subs

    if expiring_soon:
        message_parts.append("\n‚è≥ –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—Ç:")
        message_parts.extend(expiring_soon)

    return "\n".join(message_parts)

#Ens Other-------------------------------------------------------------------------------

# SSL ---------------------------------------------------------------------------------

def load_subscriptions_ssl():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ TOML-—Ñ–∞–π–ª–∞."""
    try:
        data = toml.load(TOML_FILE_OTHER)
        return data.get("ssl", {})
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ TOML: {e}")
        return {}




async def check_subscriptions_ssl():
    today = datetime.today().date()      # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
    subscriptions = load_subscriptions_ssl() # –ó–∞–≥—Ä—É–∑–∫–∞ TOML

    if not subscriptions:                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫
        return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫."

    all_subs = []       # –°–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ —Å –¥–∞—Ç–∞–º –∫–æ–Ω—Ü–∞
    expiring_soon = []  # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 30 –¥–Ω–µ–π –ø–∏—à–µ–º —Å—é–¥–∞

    # expires - –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    # today   - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞



    for sub in subscriptions.values():

        name = sub["name"]
        expires = datetime.strptime(sub["expires"], "%Y-%m-%d").date()
        days_left = (expires - today).days                                 # expires - today ‚Äî —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏ –∏ .days –ø–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –∏–∑ timedelta

        all_subs.append(f"{name}: –∏—Å—Ç–µ–∫–∞–µ—Ç {expires} ({days_left} –¥–Ω–µ–π)")  # .append() = –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞

        if days_left <= 30: # –ï—Å–ª–∏ <= 30 —Ç–æ —Å–æ—Ö—Ä–æ–Ω—è–µ–º –≤ expiring_soon
            expiring_soon.append(f"‚ö† {name}: {days_left} –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è!")


    message_parts = ["üìã –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏:"] + all_subs

    if expiring_soon:
        message_parts.append("\n‚è≥ –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—Ç:")
        message_parts.extend(expiring_soon)

    return "\n".join(message_parts)



# END SSL -----------------------------------------------------------------------------





async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)



if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())