import toml
import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from apscheduler.schedulers.asyncio import AsyncIOScheduler

TOKEN = ""
CHAT_ID = ""
TOML_FILE = "subscriptions.toml"

bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()




def load_subscriptions():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ TOML-—Ñ–∞–π–ª–∞."""
    try:
        data = toml.load(TOML_FILE)
        return data.get("subscriptions", {})
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ TOML: {e}")
        return {}




async def check_subscriptions():
    today = datetime.today().date() # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
    subscriptions = load_subscriptions() # –ó–∞–≥—Ä—É–∑–∫–∞ TOML

    if not subscriptions: # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ —Ç–æ –≤–æ–∑–≤—Ä–æ—â–∞–µ–º "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"
        logging.warning("–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.") 
        return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫."

    all_subs = []       # –°–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ —Å –¥–∞—Ç–∞–º –∫–æ–Ω—Ü–∞
    expiring_soon = []  # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 30 –¥–Ω–µ–π –ø–∏—à–µ–º —Å—é–¥–∞

    for sub in subscriptions.values():
        try:
            name = sub["name"]
            expires = datetime.strptime(sub["expires"], "%Y-%m-%d").date()
            days_left = (expires - today).days

            all_subs.append(f"{name}: –∏—Å—Ç–µ–∫–∞–µ—Ç {expires} ({days_left} –¥–Ω–µ–π)")

            if days_left <= 30:
                expiring_soon.append(f"‚ö† {name}: {days_left} –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è!")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {sub}: {e}")

    message = "üìã –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n" + "\n".join(all_subs)
    if expiring_soon:
        message += "\n\n‚è≥ –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—Ç:\n" + "\n".join(expiring_soon)
    
    return message



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ /start
@dp.message(Command("start"))
async def send_subscriptions(message: Message):
    subscriptions_info = await check_subscriptions()
    await message.answer(subscriptions_info)



# –ï—â–µ –Ω–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª
async def on_startup():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    scheduler.add_job(check_subscriptions, "cron", hour=10, minute=0)
    scheduler.start()
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await on_startup()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
